{"version":3,"sources":["js/init.js"],"names":["api_files_url","InitTimeline","$tvFrame","$vline","hours","startTimeInit","startTime","find","attr","split","startTimeMoment","paddingLeft","undefined","setInterval","$","width","css","percentElapsedTimeNowByDay","startDay","from","moment","diff","percent","duration","asMinutes","Math","floor","parseInt","initFromCookie","item","localStorage","getItem","Number","fixgaps","channelpopups","descriptionpopups","popupdelay","popuptimes","popuprating","popupsubtitle","popupdescription","popupdate","popupcategories","popupstarrating","offsetminutes","dayfirst","categorycolors","loadonclick","highlightclickable","highlightnew","printdates","timebarfrequency","highlightmovies","isLocalhost","Boolean","window","location","hostname","match","addEventListener","navigator","protocol","showUpdateBar","newWorker","refreshing","serviceWorker","register","then","reg","console","log","controller","installing","state","document","getElementById","className","reload","postMessage","action","$clock","$xmltv_list","$loading","queryStringParams","parseQueryString","fetch","res","json","empty","append","files","length","forEach","file","url","name","selected","prop","loadXSL","val","catch","e","error","text","Date","format","tooltip","processor","sortstring","XSLTProcessor","currenttime","change","myDate","xmlfileneeded","html","method","response","str","DOMParser","parseFromString","x","xsl","sortTag","getElementsByTagName","setAttribute","importStylesheet","loadXML","XMLHttpRequest","alert","xml","xmlfileloaded","Init","getHours","getDate","getMonth","getFullYear","errorstring","message","filetext","notfoundtext","dl","ch","cd","cm","cy","offset","show","hide","startDate","endDate","setHours","prevDate","fileDate","fileMonth","intHours","intMinutes","getMinutes","starthours","startminutes","endhours","endminutes","gridstarttimestring","toDateString","gridendtimestring","setParameter","toString","earliertext","latertext","fragment","transformToFragment","$far","popperTab","popover","on","data","push","target","is","slice","indexOf","setMinutes","search","objURL","replace","RegExp","$0","$1","$2","$3"],"mappings":"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","file":"init.ce96ca9e.map","sourceRoot":"..\\public","sourcesContent":["///var $ = require('jquery');\r\nconst api_files_url = 'https://api.myjson.com/bins/8tvgs';\r\n\r\n$(function () {\r\n\r\n    // Check to make sure service workers are supported in the current browser,\r\n    // and that the current page is accessed from a secure origin. Using a\r\n    // service worker from an insecure origin will trigger JS console errors.\r\n    const isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n    );\r\n    window.addEventListener('load', function () {\r\n        if ('serviceWorker' in navigator &&\r\n            (window.location.protocol === 'https:' || window.location.protocol === 'http:' || isLocalhost)) {\r\n            if ('serviceWorker' in navigator) {\r\n                let newWorker;\r\n                navigator.serviceWorker\r\n                    .register('../service-worker.js')\r\n                    .then(reg => {\r\n                        console.log('Service Worker Registered');\r\n                        reg.addEventListener('updatefound', () => {\r\n                            // A wild service worker has appeared in reg.installing!\r\n                            if (navigator.serviceWorker.controller) {\r\n                                newWorker = reg.installing;\r\n                                if (newWorker != null) {\r\n                                    newWorker.addEventListener('statechange', () => {\r\n                                        // Has network.state changed?\r\n                                        switch (newWorker.state) {\r\n                                            case 'installed':\r\n                                                // new update available\r\n                                                showUpdateBar();\r\n                                                break;\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                let refreshing;\r\n                navigator.serviceWorker.addEventListener('controllerchange', function () {\r\n                    if (refreshing) return;\r\n                    window.location.reload();\r\n                    refreshing = true;\r\n                });\r\n\r\n                function showUpdateBar() {\r\n                    let snackbar = document.getElementById('snackbar');\r\n                    snackbar.className = 'show';\r\n                }\r\n                // The click event on the pop up notification\r\n                document.getElementById('reload').addEventListener('click', function () {\r\n                    newWorker.postMessage({\r\n                        action: 'skipWaiting'\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    var $clock = $('#barclock');\r\n    var $xmltv_list = $(\"#xmlt_list\");\r\n    var $tvFrame = $(\"#tvframe\");\r\n    var $loading = $('#loading');\r\n    var queryStringParams = parseQueryString();\r\n\r\n    fetch(api_files_url)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            $xmltv_list.empty().append('<option selected>Select one xmltv file</option>');\r\n\r\n            //Loading file from queryString (ex: http://localhost:3000/?file=https://raw.githubusercontent.com/steventrux/epg/master/guide.xml)\r\n            if (queryStringParams['file']) {\r\n                $xmltv_list.append(`<option value=\"${queryStringParams['file']}\">${queryStringParams['file']}</option>`);\r\n            }\r\n            if (res && res.files.length > 0) {\r\n                res.files.forEach(file => $xmltv_list.append(`<option value=\"${file.url}\">${file.name}</option>`));\r\n                let selected = $($xmltv_list.find('option')[1]);\r\n                selected.prop(\"selected\", \"selected\");\r\n                loadXSL(selected.val());\r\n            }\r\n        }).catch(e => console.error({ ...e\r\n        }));\r\n\r\n    setInterval(() => {\r\n        $clock.find('.time').text(moment(new Date()).format(\"LLLL\"));\r\n    }, 1000);\r\n\r\n    $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n    var processor = new XSLTProcessor();\r\n    var sortstring;\r\n    var currenttime = new Date();\r\n\r\n    $xmltv_list.change(function () {\r\n        loadXSL($xmltv_list.val());\r\n    });\r\n\r\n    var {\r\n        offsetminutes,\r\n        hours,\r\n        fixgaps,\r\n        popupdelay,\r\n        timebarfrequency,\r\n        channelpopups,\r\n        descriptionpopups,\r\n        popuptimes,\r\n        popuprating,\r\n        popupsubtitle,\r\n        popupdescription,\r\n        popupdate,\r\n        popupcategories,\r\n        popupstarrating,\r\n        highlightclickable,\r\n        highlightmovies,\r\n        printdates,\r\n        dayfirst,\r\n        categorycolors,\r\n        highlightnew,\r\n        loadonclick\r\n    } = initFromCookie();\r\n\r\n    var myDate = new Date(currenttime);\r\n    myDate.setMinutes(myDate.getMinutes() + (60 - offsetminutes));\r\n\r\n    sortstring = \"display-name[3]\";\r\n\r\n    function loadXSL(xmlfileneeded) {\r\n        $loading.css('display', 'block');\r\n        $loading.html(\"index.xsl\");\r\n        fetch(\"index.xsl\", {\r\n                method: 'GET'\r\n            }).then(response => response.text())\r\n            .then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\"))\r\n            .then(x => {\r\n                xsl = x;\r\n                sortTag = xsl.getElementsByTagName('xsl:sort'); //for firefox 3\r\n                if (!sortTag.item(0)) {\r\n                    sortTag = xsl.getElementsByTagName('sort');\r\n                } //for firefox 2\r\n                sortTag.item(0).setAttribute(\"select\", sortstring);\r\n                processor.importStylesheet(xsl);\r\n                loadXML(xmlfileneeded);\r\n            }).catch(function (error) {\r\n                var errorstring = error.message + \": \" + filetext + \" \" + xmlfileneeded + \" \" + notfoundtext + \".\";\r\n                $loading.text(errorstring);\r\n            });\r\n    }\r\n\r\n    function loadXML(xmlfileneeded) {\r\n        if (xmlfileneeded) {\r\n\r\n            $loading.css(\"display\", \"block\");\r\n            $loading.text(xmlfileneeded);\r\n            if (window.XMLHttpRequest && window.XSLTProcessor) {\r\n\r\n                fetch(xmlfileneeded, {\r\n                        method: 'GET'\r\n                    }).then(response => response.text())\r\n                    .then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\"))\r\n                    .then(x => {\r\n                        xml = x;\r\n                        xmlfileloaded = xmlfileneeded;\r\n                        $loading.css(\"display\", \"block\");\r\n                        $loading.text(\"Preparing grid...\");\r\n                        Init(hours, myDate.getHours(), myDate.getDate(), myDate.getMonth() + 1, myDate.getFullYear());\r\n                    }).catch(function (error) {\r\n                        var errorstring = error.message + \": \" + filetext + \" \" + xmlfileneeded + \" \" + notfoundtext + \".\";\r\n                        $loading.text(errorstring);\r\n                    });\r\n            } else {\r\n                alert('Your browser can\\'t handle this script');\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function Init(dl, ch, cd, cm, cy, offset) {\r\n        /*This stuff needs to be done each time the time changes */\r\n        $loading.show();\r\n        $tvFrame.hide();\r\n        $tvFrame.text(\"\");\r\n        var startDate = new Date(cy, cm - 1, cd, ch, 0, 0);\r\n        myDate = new Date(cy, cm - 1, cd, ch, 0, 0);\r\n        var endDate = new Date(cy, cm - 1, cd, ch, 0, 0);\r\n        endDate.setHours(endDate.getHours() + dl);\r\n        var prevDate = new Date(cy, cm - 1, cd, ch, 0, 0);\r\n        prevDate.setHours(prevDate.getHours() - dl);\r\n\r\n        fileDate = startDate.getDate();\r\n        if (fileDate < 10) {\r\n            fileDate = \"0\" + fileDate;\r\n        }\r\n\r\n        fileMonth = startDate.getMonth() + 1;\r\n        if (fileMonth < 10) {\r\n            fileMonth = \"0\" + fileMonth;\r\n        }\r\n\r\n        intHours = startDate.getHours();\r\n        intMinutes = startDate.getMinutes();\r\n        starthours = intHours + \":\";\r\n        if (intMinutes < 10) {\r\n            startminutes = \"0\" + intMinutes;\r\n        } else {\r\n            startminutes = intMinutes;\r\n        }\r\n        intHours = endDate.getHours();\r\n        intMinutes = endDate.getMinutes();\r\n        endhours = intHours + \":\";\r\n        if (intMinutes < 10) {\r\n            endminutes = \"0\" + intMinutes;\r\n        } else {\r\n            endminutes = intMinutes;\r\n        }\r\n        gridstarttimestring = starthours + startminutes + \" \" + startDate.toDateString();\r\n        gridendtimestring = endhours + endminutes + \" \" + endDate.toDateString();\r\n\r\n        if (offset) {\r\n            startDate.setHours(startDate.getHours() + offset);\r\n            endDate.setHours(endDate.getHours() + offset);\r\n            prevDate.setHours(prevDate.getHours() + offset);\r\n        }\r\n\r\n        processor.setParameter(null, \"DisplayLength\", dl);\r\n        processor.setParameter(null, \"CurrentHour\", startDate.getHours());\r\n        processor.setParameter(null, \"CurrentDay\", startDate.getDate());\r\n        processor.setParameter(null, \"CurrentMonth\", startDate.getMonth() + 1);\r\n        processor.setParameter(null, \"CurrentYear\", startDate.getFullYear());\r\n        processor.setParameter(null, \"StopHour\", endDate.getHours());\r\n        processor.setParameter(null, \"StopDay\", endDate.getDate());\r\n        processor.setParameter(null, \"StopMonth\", endDate.getMonth() + 1);\r\n        processor.setParameter(null, \"StopYear\", endDate.getFullYear());\r\n        processor.setParameter(null, \"PrevHour\", prevDate.getHours());\r\n        processor.setParameter(null, \"PrevDay\", prevDate.getDate());\r\n        processor.setParameter(null, \"PrevMonth\", prevDate.getMonth() + 1);\r\n        processor.setParameter(null, \"PrevYear\", prevDate.getFullYear());\r\n        processor.setParameter(null, \"FixGaps\", fixgaps.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupDelay\", popupdelay);\r\n        processor.setParameter(null, \"EarlierText\", earliertext);\r\n        processor.setParameter(null, \"LaterText\", latertext);\r\n        processor.setParameter(null, \"TimeBarFrequency\", timebarfrequency);\r\n        processor.setParameter(null, \"ChannelPopups\", channelpopups.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"DescriptionPopups\", descriptionpopups.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupTimes\", popuptimes.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupRating\", popuprating.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupSubtitle\", popupsubtitle.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupDescription\", popupdescription.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupDate\", popupdate.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupCategories\", popupcategories.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"PopupStarRating\", popupstarrating.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"HighlightClickable\", highlightclickable.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"HighlightMovies\", highlightmovies);\r\n        processor.setParameter(null, \"PrintDates\", printdates.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"DayFirst\", dayfirst.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"Categories\", categorycolors.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"HighlightNew\", highlightnew.toString() === \"true\" ? 1 : 0);\r\n        processor.setParameter(null, \"OnClick\", loadonclick);\r\n\r\n        var fragment = processor.transformToFragment(xml, document);\r\n        $loading.hide();\r\n        $far = $(fragment);\r\n        let $vline = $('<div id=\"vline\"><span class=\"vheader\"></span></div>');\r\n        $far.append($vline);\r\n        $tvFrame.append($far);\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n        var popperTab = [];\r\n        $('[data-toggle=\"popover\"]').popover({\r\n            html: true,\r\n        }).on('shown.bs.popover', function (data) {\r\n            popperTab.push($(data.target));\r\n        });\r\n\r\n        $(document).on('click touchend', function (e) {\r\n            var target = $(e.target);\r\n            popperTab.forEach(x => {\r\n                if (!target.is(x)) {\r\n                    x.popover('hide');\r\n                    popperTab = popperTab.slice(popperTab.indexOf(x), 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        InitTimeline($tvFrame, $vline, hours);\r\n\r\n        $tvFrame.show();\r\n    }\r\n\r\n    window.Init = Init;\r\n    $loading.css(\"display\", \"block\");\r\n\r\n});\r\n\r\n\r\nfunction InitTimeline($tvFrame, $vline, hours) {\r\n    let startTimeInit = $tvFrame.find('th.time[onclick^=Init]').attr('onclick');\r\n    let startTime = (startTimeInit.split('Init(')[1].split(')')[0]).split(',');\r\n    let startTimeMoment = `${startTime[2]}-${startTime[3]}-${startTime[4]} ${startTime[1]}:00:00`;\r\n    var paddingLeft = undefined;\r\n\r\n    setInterval(() => {\r\n        if (undefined == paddingLeft) {\r\n            paddingLeft = ($('div.leftchannel').width() / $tvFrame.width()) * 100;\r\n        }\r\n        $vline.css('margin-left', (percentElapsedTimeNowByDay(startTimeMoment, hours) + paddingLeft) + '%');\r\n    }, 1000);\r\n}\r\n\r\nfunction percentElapsedTimeNowByDay(startDay, hours) {\r\n    const from = moment(startDay, 'DD-MM-YYYY hh:mm:ss');\r\n    const diff = moment().diff(from);\r\n    const elapsedDuration = moment.duration(diff);\r\n    var percent = (elapsedDuration.asMinutes() / (60 * hours)) * 100;\r\n\r\n    //var s = Math.floor(elapsedDuration.asHours()) + moment(diff).format(\":mm:ss\");\r\n    // console.log({\r\n    //     from,\r\n    //     diff,\r\n    //     elapsedDuration: s,\r\n    //     percent\r\n    // });\r\n    return Math.floor(parseInt(percent));\r\n}\r\n\r\nfunction initFromCookie() {\r\n    var item = localStorage.getItem(\"xsltvhours\");\r\n    var hours = item ? Number(item) : 4;\r\n    item = localStorage.getItem(\"xsltvfixgaps\");\r\n    var fixgaps = item ? item : false;\r\n    item = localStorage.getItem(\"xsltvchannelpopups\");\r\n    var channelpopups = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvdescriptionpopups\");\r\n    var descriptionpopups = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupdelay\");\r\n    var popupdelay = item ? Number(item) : 0;\r\n    item = localStorage.getItem(\"xsltvpopuptimes\");\r\n    var popuptimes = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopuprating\");\r\n    var popuprating = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupsubtitle\");\r\n    var popupsubtitle = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupdescription\");\r\n    var popupdescription = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupdate\");\r\n    var popupdate = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupcategories\");\r\n    var popupcategories = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvpopupstarrating\");\r\n    var popupstarrating = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvoffsetminutes\");\r\n    var offsetminutes = item ? Number(item) : 60;\r\n    item = localStorage.getItem(\"xsltvdayfirst\");\r\n    var dayfirst = item ? item : false;\r\n    item = localStorage.getItem(\"xsltvcategorycolors\");\r\n    var categorycolors = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvloadonclick\");\r\n    var loadonclick = item ? item : 'POPER'; //IMDB URL\r\n    item = localStorage.getItem(\"xsltvhighlightclickable\");\r\n    var highlightclickable = item ? item : true;\r\n    var highlightmovies = 3,\r\n        item = localStorage.getItem(\"xsltvhighlightnew\");\r\n    var highlightnew = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvprintdates\");\r\n    var printdates = item ? item : true;\r\n    item = localStorage.getItem(\"xsltvtimebarfrequency\");\r\n    var timebarfrequency = item ? item : -1;\r\n    return {\r\n        offsetminutes,\r\n        hours,\r\n        fixgaps,\r\n        popupdelay,\r\n        timebarfrequency,\r\n        channelpopups,\r\n        descriptionpopups,\r\n        popuptimes,\r\n        popuprating,\r\n        popupsubtitle,\r\n        popupdescription,\r\n        popupdate,\r\n        popupcategories,\r\n        popupstarrating,\r\n        highlightclickable,\r\n        highlightmovies,\r\n        printdates,\r\n        dayfirst,\r\n        categorycolors,\r\n        highlightnew,\r\n        loadonclick\r\n    };\r\n}\r\n\r\nvar parseQueryString = () => {\r\n\r\n    var str = window.location.search;\r\n    var objURL = {};\r\n\r\n    str.replace(\r\n        new RegExp(\"([^?=&]+)(=([^&]*))?\", \"g\"),\r\n        function ($0, $1, $2, $3) {\r\n            objURL[$1] = $3;\r\n        }\r\n    );\r\n    return objURL;\r\n};"]}